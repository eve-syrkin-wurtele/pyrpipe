import yaml
import sys
import os
from pyrpipe import sra,qc,mapping,tools,assembly
from pyrpipe import pyrpipe_utils as pu
from pyrpipe import pyrpipe_engine as pe


####Read config#####
configfile: "config.yaml"
DIR = config['DIR']
THREADS=config['THREADS']

##check required files
GENOME= config['genome']
GTF=config['gtf']
BLASTTARGET=config['blasttarget']
if not pu.check_files_exist(GENOME):
	pu.mkdir("human_data")
	pe.execute_command('wget ftp://ftp.ensembl.org/pub/release-99/fasta/homo_sapiens/dna/Homo_sapiens.GRCh38.dna_sm.primary_assembly.fa.gz -O human_data/Homo_sapiens.GRCh38.dna_sm.primary_assembly.fa.gz'.split(),logs=False)
	pe.execute_command('gunzip human_data/Homo_sapiens.GRCh38.dna_sm.primary_assembly.fa.gz'.split(),logs=False)

if not pu.check_files_exist(GTF):
	pe.execute_command('wget ftp://ftp.ensembl.org/pub/release-99/gtf/homo_sapiens/Homo_sapiens.GRCh38.99.gtf.gz -O human_data/Homo_sapiens.GRCh38.99.gtf.gz'.split(),logs=False)
	pe.execute_command('gunzip human_data/Homo_sapiens.GRCh38.99.gtf.gz'.split(),logs=False)

if not pu.check_files_exist(BLASTTARGET):
	pe.execute_command('wget ftp://ftp.uniprot.org/pub/databases/uniprot/current_release/knowledgebase/complete/uniprot_sprot.fasta.gz -O human_data/uniprot_sprot.fasta.gz'.split(),logs=False)
	pe.execute_command('gunzip human_data/uniprot_sprot.fasta.gz'.split(),logs=False)

if pu.check_files_exist(GENOME,GTF,BLASTTARGET):
	pu.print_green("Genome, GTF, Uniprot files...OK")
else:
	pu.print_boldred("Genome and GTF files...NOT FOUND")
	sys.exit(1)


#####Read SRR ids######
with open ("SRRids.txt") as f:
	SRR=f.read().splitlines()

#######Read Params###########
with open('params.yaml') as file:
        documents = yaml.full_load(file)

##fasterqdump
fastqdump_params=documents['fasterqdump']
fastqdump_params["-t"]=DIR

##bbduk
bbduk_params=documents['bbduk']

##hisat2
hisat2_params=documents['hisat2']

##StringTie##
stringtie_params=documents['stringtie']

##Cufflinks##
cuff_params=documents['cufflinks']


#####create objects######

#SRA
SOBJS={}
for s in SRR:
	SOBJS[s]=sra.SRA(s,DIR)
	#OBLIST.append(sra.SRA(s,DIR))

##BBDUK##
BBDUK=qc.BBmap(**bbduk_params)
##HISAT2##
HISAT=mapping.Hisat2(hisat2_index="hisat_index/human_index",**hisat2_params)
if not HISAT.check_index():
	#build hisat2 index
	pu.print_green("Building Hisat2 index")
	HISAT.build_index("hisat_index","human_index",GENOME,**{"-p":"25","-a":"","-q":""})
##SAMTOOLS
ST=tools.Samtools(**{"-@":str(THREADS)})

##StringTie##
STIE=assembly.Stringtie(reference_gtf=GTF,**stringtie_params)

##CUFF##
CL=assembly.Cufflinks(reference_gtf=GTF,**cuff_params)

rule all:
	input:
		#expand("{wd}/{sample}/{sample}_1_bbduk.fastq",sample=SRR,wd=DIR,num=[1,2]),
		#expand("{wd}/{sample}/{sample}_2_bbduk.fastq",sample=SRR,wd=DIR,num=[1,2])
		#expand("{wd}/{sample}/{sample}_hisat2.sam",sample=SRR,wd=DIR,num=[1,2])
		#expand("{wd}/{sample}/{sample}_hisat2_sorted_cufflinks.gtf",sample=SRR,wd=DIR,num=[1,2]),
		#expand("{wd}/{sample}/{sample}_hisat2_sorted_stringtie.gtf",sample=SRR,wd=DIR,num=[1,2]),
		#expand("{wd}/portout/3-filt/portcullis_filtered.pass.junctions.bed",wd=DIR)
		expand("{wd}/mikadoout/mikado.loci.gff3",wd=DIR)


rule download:
	output:
		f1="{wd}/{sample}/{sample}_1_bbduk.fastq",
		f2="{wd}/{sample}/{sample}_2_bbduk.fastq",
		#fid="{sample}"
		

	threads: THREADS
		
	run:
		fqfile=str(output.f1)
		srr=pu.get_file_basename(fqfile).split("_")[0]
		SOBJS[srr].download_fastq(procs=int(threads))
		SOBJS[srr].perform_qc(BBDUK,deleteRawFastq=True)

rule hisat:
	input:
		"{wd}/{sample}/{sample}_1_bbduk.fastq",
		"{wd}/{sample}/{sample}_2_bbduk.fastq"

	output:
		sam="{wd}/{sample}/{sample}_hisat2.sam"

	threads: THREADS

	run:
		samfile=str(output.sam)
		srr=pu.get_file_basename(samfile).split("_")[0]
		HISAT.perform_alignment(SOBJS[srr],**{"-p":str(threads)})

rule samtoBam:
	input:
		sam="{wd}/{sample}/{sample}_hisat2.sam"
	output:
		bam="{wd}/{sample}/{sample}_hisat2_sorted.bam"
	threads: THREADS
	run:
		print({input.sam})
		bamf=str({output.bam})
		samf=str({input.sam})
		srr=pu.get_file_basename(bamf).split("_")[0]
		ST.sam_sorted_bam(input.sam,delete_sam=True,delete_bam=True,objectid=srr)
		

rule stringtie:
	input:
		bam="{wd}/{sample}/{sample}_hisat2_sorted.bam"
	output:
		gtf="{wd}/{sample}/{sample}_hisat2_sorted_stringtie.gtf"
	
	threads: THREADS

	run:
		f=str(output.gtf)
		srr=pu.get_file_basename(f).split("_")[0]
		STIE.perform_assembly(input.bam,objectid=srr)

rule cufflinks:
	input:
		bam="{wd}/{sample}/{sample}_hisat2_sorted.bam"
	output:
		gtf="{wd}/{sample}/{sample}_hisat2_sorted_cufflinks.gtf"
	
	threads: THREADS

	run:
		f=str(output.gtf)
		srr=pu.get_file_basename(f).split("_")[0]
		CL.perform_assembly(input.bam, objectid=srr)



rule mergebam:
	input:
		expand("{wd}/{sample}/{sample}_hisat2_sorted.bam",sample=SRR,wd=DIR)
	output:
	       	mergedbam="{wd}/merged.bam"
		#expand("{wd}/merged.bam",wd=DIR)
	threads: THREADS
	run:
		print (input)
		input_bams=[ os.path.join(DIR,S,S+"_hisat2_sorted.bam") for S in SRR]
		ST.merge_bam(*input_bams,out_file="merged",out_dir=DIR)
		

rule portcullis:
	input:
		bam="{wd}/merged.bam"
	output:
		junc="{wd}/portout/3-filt/portcullis_filtered.pass.junctions.bed"
	threads: THREADS
	run:
		PC=tools.Portcullis()
    		PC.run_portcullisFull(GENOME,input.bam,out_dir=DIR+"/portout",**{"--threads":str(threads)})
		

"""	
rule mikado_config:
	input:
		list="{wd}/list.txt"
"""


rule create_GTFlist:
	input:
		g1=expand("{wd}/{sample}/{sample}_hisat2_sorted_cufflinks.gtf",sample=SRR,wd=DIR,num=[1,2]),
                g2=expand("{wd}/{sample}/{sample}_hisat2_sorted_stringtie.gtf",sample=SRR,wd=DIR,num=[1,2]),
	output:
		"{wd}/list.txt"
	run:
		filepath=DIR+"/list.txt"
		gtfs=[]
		temp=input.g1+input.g2
		for l in temp:
			thisName=pu.get_file_basename(l)
			if thisName:
				gtfs.append("\t".join([l,thisName,"False"]))
       
		f=open(filepath,"w")
		f.write("\n".join(gtfs))
		f.close()
		

rule mikado:
	input:
		junctions="{wd}/portout/3-filt/portcullis_filtered.pass.junctions.bed",
		listfile="{wd}/list.txt"
	output:
		mikadoout="{wd}/mikadoout/mikado.loci.gff3"

	threads: THREADS
	run:
		dm=tools.Diamond(index="")
		dm.build_index(BLASTTARGET,"diamondDB",out_dir=DIR+"/diamond_index",threads=THREADS)
		mode="permissive"
		scoring="human.yaml"
		mk=tools.Mikado()
		mk.runMikadoFull(input.listfile,GENOME,mode,scoring,input.junctions,"mkconf",BLASTTARGET,dm,THREADS,out_dir=DIR+"/mikadoout",verbose=False)	

	













